import win32com.client as win32
from tkinter import *
from tkinter import filedialog, ttk
from pyzbar.pyzbar import decode
from PIL import Image
from datetime import datetime
from unidecode import unidecode
import cv2
import os
import builtins
open = builtins.open
import sys
sys.stdout = open(os.devnull, 'w')
sys.stderr = open(os.devnull, 'w')
from qreader import QReader
import winsound
from tkinter import filedialog
from pygrabber.dshow_graph import FilterGraph
import threading

def chuan_hoa_ngay(dmy: str):
    return f"{dmy[:2]}/{dmy[2:4]}/{dmy[4:]}" if len(dmy) == 8 else dmy

def parse_qr(data: str):
    parts = data.split('|')
    if len(parts) >= 7:
        return {
            "S·ªë gi·∫•y t·ªù": parts[0],
            "CMND": parts[1],
            "H·ªç t√™n": parts[2],
            "Ng√†y sinh": chuan_hoa_ngay(parts[3]),
            "Gi·ªõi t√≠nh": parts[4],
            "ƒê·ªãa ch·ªâ": parts[5],
            "Ng√†y c·∫•p": chuan_hoa_ngay(parts[6])
        }
    return None

class QRApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ph·∫ßn m·ªÅm khai b√°o l∆∞u tr√∫ BY Nguy·ªÖn Ho√†ng Huy - My phone: 033.293.6390")
        self.root.geometry("1000x700")
        self.root.configure(bg="#e6f2ff")

        self.fields = {}
        self.info = None
        self.front_img_path = None
        self.back_img_path = None
        self.front_path_var = StringVar()
        self.back_path_var = StringVar()

        labels = [
            "S·ªë gi·∫•y t·ªù", "S·ªë CMND c≈© (n·∫øu c√≥)", "H·ªç v√† t√™n",
            "Ng√†y sinh", "Gi·ªõi t√≠nh", "N∆°i th∆∞·ªùng tr√∫",
            "Ng√†y c·∫•p gi·∫•y t·ªù", "Lo·∫°i gi·∫•y t·ªù", "T√™n ph√≤ng l∆∞u tr√∫"
        ]

        self.ds_phong = [
            "", "Ph√≤ng 3 nh√† c≈©", "Ph√≤ng 4 nh√† c≈©", "Ph√≤ng 5 nh√† c≈©",
            "Ph√≤ng 7 nh√† c≈©", "Ph√≤ng 8 nh√† c≈©", "Ph√≤ng 9 nh√† c≈©",
            "Ph√≤ng 1 nh√† m·ªõi", "Ph√≤ng 2 nh√† m·ªõi", "Ph√≤ng 3 nh√† m·ªõi",
            "Ph√≤ng 4 nh√† m·ªõi", "Ph√≤ng 5 nh√† m·ªõi"
        ]

        font_label = ("Segoe UI", 11)
        font_entry = ("Segoe UI", 11)

        main_frame = Frame(root, bg="#e6f2ff")
        main_frame.pack(fill=BOTH, expand=True, padx=20, pady=10)

        form_frame = Frame(main_frame, bg="#e6f2ff")
        form_frame.pack(side=LEFT, padx=10, pady=10, anchor=N)

        button_frame = Frame(main_frame, bg="#e6f2ff")
        button_frame.pack(side=RIGHT, padx=10, pady=10, anchor=N)

        for idx, label in enumerate(labels):
            Label(form_frame, text=label + ":", font=font_label, bg="#e6f2ff", anchor="w", width=25).grid(row=idx, column=0, sticky=W, padx=10, pady=8)

            if label == "Gi·ªõi t√≠nh":
                self.gender_var = StringVar(value="none")
                gender_frame = Frame(form_frame, bg="#e6f2ff")
                gender_frame.grid(row=idx, column=1, sticky=W)
                Radiobutton(gender_frame, variable=self.gender_var, value="none").pack_forget()
                Radiobutton(gender_frame, text="Nam", variable=self.gender_var, value="Nam", bg="#e6f2ff", font=font_entry).pack(side=LEFT, padx=5)
                Radiobutton(gender_frame, text="N·ªØ", variable=self.gender_var, value="N·ªØ", bg="#e6f2ff", font=font_entry).pack(side=LEFT, padx=5)
            elif label == "T√™n ph√≤ng l∆∞u tr√∫":
                cb = ttk.Combobox(form_frame, values=self.ds_phong, state="readonly", width=33, font=font_entry)
                cb.grid(row=idx, column=1, sticky=W, padx=5)
                cb.set("")
                self.fields[label] = cb
            else:
                entry = Entry(form_frame, width=40, font=font_entry)
                if label == "Lo·∫°i gi·∫•y t·ªù":
                    entry.insert(0, "CCCD")
                entry.grid(row=idx, column=1, sticky=W, padx=5)
                self.fields[label] = entry

        # üÜï Th√™m √¥ hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n ·∫£nh
        Label(form_frame, text="ƒê∆∞·ªùng d·∫´n ·∫£nh m·∫∑t tr∆∞·ªõc:", font=font_label, bg="#e6f2ff").grid(row=len(labels), column=0, sticky=W, padx=10, pady=8)
        Entry(form_frame, textvariable=self.front_path_var, font=font_entry, width=40, state='readonly').grid(row=len(labels), column=1, sticky=W, padx=5)

        Label(form_frame, text="ƒê∆∞·ªùng d·∫´n ·∫£nh m·∫∑t sau:", font=font_label, bg="#e6f2ff").grid(row=len(labels)+1, column=0, sticky=W, padx=10, pady=8)
        Entry(form_frame, textvariable=self.back_path_var, font=font_entry, width=40, state='readonly').grid(row=len(labels)+1, column=1, sticky=W, padx=5)
        btn_style = {"font": ("Segoe UI", 11, "bold"), "padx": 10, "pady": 5}
        Button(button_frame, text="üì∑ Qu√©t th√¥ng tin CCCD t·ª´ ·∫£nh tr√™n m√°y t√≠nh", command=self.chon_anh, bg="#007acc", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üì∏ Qu√©t th√¥ng tin CCCD b·∫±ng Webcam", command=self.quet_qr_webcam, bg="#ffa500", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üñºÔ∏è Ch·ª•p ·∫£nh m·∫∑t tr∆∞·ªõc", command=lambda: self.chup_anh('front'), bg="#17a2b8", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üñºÔ∏è Ch·ª•p ·∫£nh m·∫∑t sau", command=lambda: self.chup_anh('back'), bg="#6f42c1", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üìÅ T·∫£i ·∫£nh m·∫∑t tr∆∞·ªõc t·ª´ m√°y t√≠nh", command=self.tai_anh_mat_truoc, bg="#20c997", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üìÅ T·∫£i ·∫£nh m·∫∑t sau t·ª´ m√°y t√≠nh", command=self.tai_anh_mat_sau, bg="#6610f2", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üìù L∆∞u th√¥ng tin", command=self.ghi_excel, bg="#28a745", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="üìÇ Xem th√¥ng tin ƒë√£ l∆∞u", command=self.mo_excel, bg="#343a40", fg="white", **btn_style).pack(fill=X, pady=6)
        Button(button_frame, text="‚ùå X√≥a d·ªØ li·ªáu", command=self.clear_fields, bg="#dc3545", fg="white", **btn_style).pack(fill=X, pady=6)

        self.status_label = Label(self.root, text="", font=("Segoe UI", 11), bg="#e6f2ff")
        self.status_label.pack(pady=5)

        # üÜï Th√™m combobox ch·ªçn webcam (hi·ªÉn th·ªã theo t√™n thi·∫øt b·ªã)
        Label(button_frame, text="üñ•Ô∏è Ch·ªçn webcam:", font=("Segoe UI", 11, "bold"), bg="#e6f2ff").pack(pady=(0, 5))

        self.webcam_name_var = StringVar()
        webcams = self.liet_ke_webcam()  # G√°n danh s√°ch thi·∫øt b·ªã v√† l∆∞u v√†o self.ten_webcams
        self.webcam_combobox = ttk.Combobox(button_frame, textvariable=self.webcam_name_var, state="readonly", font=("Segoe UI", 10))
        self.webcam_combobox['values'] = webcams
        self.webcam_combobox.pack(fill=X, pady=5)

        if webcams:
            self.webcam_combobox.current(0)  # Ch·ªçn webcam ƒë·∫ßu ti√™n l√†m m·∫∑c ƒë·ªãnh
        
        # üîß ƒê·∫£m b·∫£o folder ·∫£nh c√πng c·∫•p v·ªõi file ch∆∞∆°ng tr√¨nh
        if getattr(sys, 'frozen', False):
            # Ch·∫°y t·ª´ file .exe
            self.app_dir = os.path.dirname(sys.executable)
        else:
            # Ch·∫°y t·ª´ file .py
            self.app_dir = os.path.dirname(os.path.abspath(__file__))

        self.folder_anh = os.path.join(self.app_dir, "Anh_CCCD_da_khai_bao")
        os.makedirs(self.folder_anh, exist_ok=True)


    def show_status(self, message, error=False):
        self.status_label.config(text=message, fg="red" if error else "green")

    def xoa_thong_bao(self):
        self.status_label.config(text="")

    def chon_anh(self):
        self.xoa_thong_bao()
        self.show_status("üì• Ch·ªçn ·∫£nh c√≥ ch·ª©a m√£ QR g·∫Øn tr√™n CCCD.")
        self.root.update_idletasks()

        image_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh CCCD",
            filetypes=[("Image files", "*.jpg *.jpeg *.png")]
        )

        if not image_path:
            return

        try:
            image = cv2.imread(image_path)

            if image is None:
                self.show_status("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh. File c√≥ th·ªÉ b·ªã h·ªèng, sai ƒë·ªãnh d·∫°ng, ho·∫∑c ƒëang b·ªã kh√≥a.", error=True)
                return

            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            qreader = QReader()
            decoded_data = qreader.detect_and_decode(image=image_rgb)

            if not decoded_data or not decoded_data[0]:
                self.show_status("‚ùå Kh√¥ng qu√©t ƒë∆∞·ª£c m√£ QR t·ª´ ·∫£nh.", error=True)
                self.phat_am_thanh("error.wav")
                return

            qr_text = decoded_data[0]
            self.dien_thong_tin_tu_qr(qr_text)

            self.front_img_path = image_path
            self.front_path_var.set(image_path)

        except Exception as e:
            # ‚ùå B·ªè ghi file log, ch·ªâ in ra console v√† b√°o l·ªói cho ng∆∞·ªùi d√πng
            print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
            self.show_status(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}", error=True)

    def quet_qr_webcam(self):
        def scan_qr():
            self.xoa_thong_bao()
            self.show_status(
                "üì∏ ƒê∆∞a ph·∫ßn m√£ QR c·ªßa CCCD l·∫°i g·∫ßn webcam ƒë·ªÉ qu√©t\n"
                "Nh·∫•n 'Q' tr√™n b√†n ph√≠m n·∫øu mu·ªën tho√°t"
            )

            webcam_index = self.ten_webcams.index(self.webcam_name_var.get())
            cap = cv2.VideoCapture(webcam_index)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

            qreader = QReader()
            found_data = None
            frame_count = 0

            while True:
                ret, frame = cap.read()
                if not ret:
                    break

                frame_count += 1
                frame_display = cv2.resize(frame, (640, 360))

                # Ch·ªâ x·ª≠ l√Ω m·ªói 6 frames (gi·∫£m t·∫£i)
                if frame_count % 6 == 0:
                    image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    result = qreader.detect_and_decode(image=image_rgb)
                    if result and result[0]:
                        found_data = result[0]
                        break

                cv2.imshow("üì∑ Webcam qu√©t QR CCCD", frame_display)
                key = cv2.waitKey(1)
                if key & 0xFF == ord('q'):
                    break

            cap.release()
            cv2.destroyAllWindows()
            self.xoa_thong_bao()

            if found_data:
                self.dien_thong_tin_tu_qr(found_data)
            else:
                self.show_status("‚ùå Kh√¥ng qu√©t ƒë∆∞·ª£c m√£ QR t·ª´ webcam.", error=True)
                self.phat_am_thanh("error.wav")

        # Ch·∫°y trong lu·ªìng ri√™ng
        threading.Thread(target=scan_qr, daemon=True).start()

    def chup_anh(self, loai):
        self.xoa_thong_bao()
        huong_dan = "üì∏ H∆∞·ªõng d·∫´n: ƒê·∫∑t CCCD m·∫∑t tr∆∞·ªõc l√™n n·ªÅn s√°ng, r√µ n√©t. Nh·∫•n 'S' ƒë·ªÉ ch·ª•p, 'Q' ƒë·ªÉ tho√°t." if loai == 'front' \
            else "üì∏ H∆∞·ªõng d·∫´n: ƒê·∫∑t CCCD m·∫∑t sau l√™n n·ªÅn s√°ng, r√µ n√©t. Nh·∫•n 'S' ƒë·ªÉ ch·ª•p, 'Q' ƒë·ªÉ tho√°t."
        self.show_status(huong_dan)
        self.root.update_idletasks()

        webcam_index = self.ten_webcams.index(self.webcam_name_var.get())
        cap = cv2.VideoCapture(webcam_index)

        while True:
            ret, frame = cap.read()
            if not ret:
                break
            cv2.imshow("Webcam chup mat truoc/sau", frame)
            key = cv2.waitKey(1)
            if key & 0xFF == ord('s'):
                folder = self.folder_anh
                os.makedirs(folder, exist_ok=True)

                ho_ten_raw = self.fields["H·ªç v√† t√™n"].get().strip()
                ho_ten_khong_dau = unidecode(ho_ten_raw).replace(" ", "_") if ho_ten_raw else "Khong_ten"
                ngay = datetime.now().strftime("%d_%m_%Y")

                filename = f"{'mat_truoc' if loai == 'front' else 'mat_sau'}_{ho_ten_khong_dau}_{ngay}.jpg"
                img_path = os.path.join(folder, filename)
                cv2.imwrite(img_path, frame)

                if loai == 'front':
                    self.front_img_path = img_path
                    self.front_path_var.set(img_path)
                else:
                    self.back_img_path = img_path
                    self.back_path_var.set(img_path)

                self.show_status(f"‚úÖ ƒê√£ l∆∞u ·∫£nh {loai}: {img_path}")
                break
            elif key & 0xFF == ord('q'):
                break
        cap.release()
        cv2.destroyAllWindows()
        self.xoa_thong_bao()

    def tai_anh_mat_truoc(self):
        self.xoa_thong_bao()
        image_path = filedialog.askopenfilename(
            title="T·∫£i l√™n ·∫£nh m·∫∑t tr∆∞·ªõc c·ªßa gi·∫•y t·ªù",
            filetypes=[("Image files", "*.jpg *.jpeg *.png")]
        )
        if not image_path:
            return

        # G√°n ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o bi·∫øn v√† giao di·ªán (kh√¥ng copy file)
        self.front_img_path = image_path
        self.front_path_var.set(image_path)
        self.show_status("T·∫£i l√™n ·∫£nh m·∫∑t tr∆∞·ªõc th√†nh c√¥ng ‚úÖ")

    def tai_anh_mat_sau(self):
        self.xoa_thong_bao()
        image_path = filedialog.askopenfilename(
            title="T·∫£i l√™n ·∫£nh m·∫∑t sau c·ªßa gi·∫•y t·ªù",
            filetypes=[("Image files", "*.jpg *.jpeg *.png")]
        )
        if not image_path:
            return

        # G√°n ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o bi·∫øn v√† giao di·ªán (kh√¥ng copy file)
        self.back_img_path = image_path
        self.back_path_var.set(image_path)
        self.show_status("T·∫£i l√™n ·∫£nh m·∫∑t sau th√†nh c√¥ng ‚úÖ")

    def phat_am_thanh(self, ten_file_wav):
        try:
            import winsound
            import sys
            import os
            path = os.path.join(
                getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__))),
                ten_file_wav
            )
            if os.path.exists(path):
                winsound.PlaySound(path, winsound.SND_FILENAME)
        except Exception as e:
            print(f"L·ªói ph√°t √¢m thanh {ten_file_wav}: {e}")

    def dien_thong_tin_tu_qr(self, data):
        import winsound
        import sys
        import os

        self.info = parse_qr(data)
        if not self.info:
            self.show_status("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ m√£ QR.", error=True)

            # üîä Ph√°t √¢m thanh l·ªói tr·ª±c ti·∫øp
            try:
                path = os.path.join(
                    getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__))),
                    "error.wav"
                )
                if os.path.exists(path):
                    winsound.PlaySound(path, winsound.SND_FILENAME)
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng ph√°t ƒë∆∞·ª£c √¢m thanh l·ªói: {e}")
            return

        # ‚úÖ ƒêi·ªÅn th√¥ng tin v√†o c√°c tr∆∞·ªùng
        self.fields["S·ªë gi·∫•y t·ªù"].delete(0, END)
        self.fields["S·ªë gi·∫•y t·ªù"].insert(0, self.info["S·ªë gi·∫•y t·ªù"])

        self.fields["S·ªë CMND c≈© (n·∫øu c√≥)"].delete(0, END)
        self.fields["S·ªë CMND c≈© (n·∫øu c√≥)"].insert(0, self.info["CMND"])

        self.fields["H·ªç v√† t√™n"].delete(0, END)
        self.fields["H·ªç v√† t√™n"].insert(0, self.info["H·ªç t√™n"])

        self.fields["Ng√†y sinh"].delete(0, END)
        self.fields["Ng√†y sinh"].insert(0, self.info["Ng√†y sinh"])

        self.gender_var.set(self.info["Gi·ªõi t√≠nh"] if self.info["Gi·ªõi t√≠nh"] in ["Nam", "N·ªØ"] else "none")

        self.fields["N∆°i th∆∞·ªùng tr√∫"].delete(0, END)
        self.fields["N∆°i th∆∞·ªùng tr√∫"].insert(0, self.info["ƒê·ªãa ch·ªâ"])

        self.fields["Ng√†y c·∫•p gi·∫•y t·ªù"].delete(0, END)
        self.fields["Ng√†y c·∫•p gi·∫•y t·ªù"].insert(0, self.info["Ng√†y c·∫•p"])

        self.fields["Lo·∫°i gi·∫•y t·ªù"].delete(0, END)
        self.fields["Lo·∫°i gi·∫•y t·ªù"].insert(0, "CCCD")

        self.show_status("Qu√©t th√¥ng tin t·ª´ QR tr√™n CCCD th√†nh c√¥ng ‚úÖ")

        # üîä Ph√°t √¢m thanh th√†nh c√¥ng tr·ª±c ti·∫øp
        try:
            path = os.path.join(
                getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__))),
                "done.wav"
            )
            if os.path.exists(path):
                winsound.PlaySound(path, winsound.SND_FILENAME)
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng ph√°t ƒë∆∞·ª£c √¢m thanh th√†nh c√¥ng: {e}")


    def ghi_excel(self):
        self.xoa_thong_bao()
        ten_phong = self.fields["T√™n ph√≤ng l∆∞u tr√∫"].get().strip()
        if not ten_phong:
            self.show_status("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√™n ph√≤ng.", error=True)
            return
        try:
            current_dir = self.app_dir
            excel_path = os.path.join(current_dir, "DU_LIEU_KHAI_BAO.xlsx")
            excel = win32.gencache.EnsureDispatch('Excel.Application')
            excel.Visible = False

            if not os.path.exists(excel_path):
                wb = excel.Workbooks.Add()
                ws = wb.Sheets(1)
                headers = ["S·ªë gi·∫•y t·ªù", "S·ªë CMND c≈©", "H·ªç v√† t√™n", "Gi·ªõi t√≠nh", "Ng√†y sinh",
                        "N∆°i th∆∞·ªùng tr√∫", "Ng√†y c·∫•p", "Lo·∫°i gi·∫•y t·ªù", "T√™n ph√≤ng", "Th·ªùi gian ghi",
                        "·∫¢nh m·∫∑t tr∆∞·ªõc", "·∫¢nh m·∫∑t sau"]
                for col, header in enumerate(headers, start=1):
                    cell = ws.Cells(1, col)
                    cell.Value = header
                    cell.Font.Name = "Times New Roman"
                    cell.Font.Size = 16
                    cell.Font.Bold = True
                    cell.Interior.Color = 0x00C0FF
                    cell.HorizontalAlignment = -4108
                wb.SaveAs(excel_path)
                wb.Close()

            wb = excel.Workbooks.Open(excel_path)
            ws = wb.Sheets(1)

            # T√¨m d√≤ng tr·ªëng ti·∫øp theo
            row = 2
            while ws.Cells(row, 1).Value:
                row += 1

            # T·∫°o b·∫£n sao ·∫£nh v√†o th∆∞ m·ª•c l∆∞u n·∫øu c·∫ßn
            def copy_if_needed(src_path):
                try:
                    if src_path and os.path.exists(src_path):
                        filename = os.path.basename(src_path)
                        dest_path = os.path.join(self.folder_anh, filename)

                        if src_path != dest_path:
                            from shutil import copyfile
                            copyfile(src_path, dest_path)

                        return dest_path
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi copy ·∫£nh: {e}")
                return ""


            # X·ª≠ l√Ω ·∫£nh
            front_final = copy_if_needed(self.front_img_path)
            back_final = copy_if_needed(self.back_img_path)

            # D·ªØ li·ªáu c·∫ßn ghi
            data = [
                self.fields["S·ªë gi·∫•y t·ªù"].get(),
                self.fields["S·ªë CMND c≈© (n·∫øu c√≥)"].get(),
                self.fields["H·ªç v√† t√™n"].get(),
                self.gender_var.get(),
                self.fields["Ng√†y sinh"].get(),
                self.fields["N∆°i th∆∞·ªùng tr√∫"].get(),
                self.fields["Ng√†y c·∫•p gi·∫•y t·ªù"].get(),
                self.fields["Lo·∫°i gi·∫•y t·ªù"].get(),
                ten_phong,
                datetime.now().strftime("%H:%M:%S %d/%m/%Y"),
                front_final,
                back_final
            ]

            for col, value in enumerate(data, start=1):
                cell = ws.Cells(row, col)
                if col in [11, 12] and os.path.exists(value):
                    label = "·∫¢nh m·∫∑t tr∆∞·ªõc" if col == 11 else "·∫¢nh m·∫∑t sau"
                    cell.Formula = f'=HYPERLINK("{value}", "{label}")'
                else:
                    cell.Value = value
                cell.Font.Size = 11
                cell.Font.Name = "Times New Roman"
                cell.HorizontalAlignment = -4108

            ws.Range("A:L").EntireColumn.AutoFit()

            rng = ws.Range(f"A1:L{row}")
            borders = rng.Borders
            for i in range(7, 13):
                borders(i).LineStyle = 1
                borders(i).Weight = 2

            wb.Save()
            wb.Close()
            self.clear_fields()
            self.show_status(f"L∆∞u th√¥ng tin th√†nh c√¥ng ‚úÖ\nV√†o d√≤ng th·ª© {row} trong file d·ªØ li·ªáu khai b√°o")

        except Exception as e:
            self.show_status(f"‚ùå L·ªói khi ghi Excel: {e}", error=True)

    def mo_excel(self):
        try:
            excel_path = os.path.join(self.app_dir, "DU_LIEU_KHAI_BAO.xlsx")
            if os.path.exists(excel_path):
                os.startfile(excel_path)
                self.show_status(f"M·ªü file d·ªØ li·ªáu khai b√°o th√†nh c√¥ng ‚úÖ\nƒê∆∞·ªùng d·∫´n file: {excel_path}")
            else:
                self.show_status("‚ö†Ô∏è Ch∆∞a c√≥ file Excel n√†o ƒë∆∞·ª£c t·∫°o.", error=True)
        except Exception as e:
            self.show_status(f"‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c file d·ªØ li·ªáu khai b√°o: {e}", error=True)

    def clear_fields(self):
        self.xoa_thong_bao()
        for field in self.fields.values():
            if isinstance(field, Entry):
                field.delete(0, END)
            elif isinstance(field, ttk.Combobox):
                field.set("")
        self.gender_var.set("none")
        self.front_img_path = None
        self.back_img_path = None
        self.front_path_var.set("")
        self.back_path_var.set("")

    def liet_ke_webcam(self):
        graph = FilterGraph()
        self.ten_webcams = graph.get_input_devices()
        return self.ten_webcams

if __name__ == "__main__":
    root = Tk()

    # L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn icon ƒë√∫ng, h·ªó tr·ª£ c·∫£ khi ch·∫°y t·ª´ .exe
    if getattr(sys, 'frozen', False):
        app_dir = sys._MEIPASS
    else:
        app_dir = os.path.dirname(os.path.abspath(__file__))

    icon_path = os.path.join(app_dir, "logo_app.ico")
    if os.path.exists(icon_path):
        root.iconbitmap(icon_path)

    app = QRApp(root)
    root.mainloop()